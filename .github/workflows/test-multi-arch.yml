name: Test on Multiple Architectures

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: ["amd64", "arm64", "arm"]
        goversion: ["1.21", "1.22"]
        include:
          - goarch: "arm"
            goarm: "7"
        exclude:
          - goarch: "arm"
            goversion: "1.22"  # Skip Go 1.22 for ARMv7 to use older stable version

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm/v7,linux/arm64

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.goversion }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.goversion }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.goversion }}-${{ matrix.goarch }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      env:
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        go version
        go env
        echo "Testing on architecture: $GOARCH${GOARM:+v$GOARM}"
        go test -v -race -coverprofile=coverage.out ./...

    - name: Run benchmark tests
      if: matrix.goarch == 'amd64'  # Only run benchmarks on amd64 to save time
      env:
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: go test -bench=. -benchmem ./...

    - name: Upload coverage to Codecov
      if: matrix.goarch == 'amd64' && matrix.goversion == '1.22'  # Only upload from one job
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build binary (verification)
      env:
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        go build -o peerless-${{ matrix.goarch }}${{ matrix.goarm && format('-v{0}', matrix.goarm) || '' }} main.go
        file peerless-${{ matrix.goarch }}${{ matrix.goarm && format('-v{0}', matrix.goarm) || '' }}

  test-summary:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Test Summary
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ All tests passed on all architectures!"
        else
          echo "❌ Some tests failed. Check the job logs for details."
          exit 1
        fi